
import streamlit as st
import pandas as pd
import pdfplumber
from io import BytesIO
from datetime import datetime
import requests 
from bs4 import BeautifulSoup

st.set_page_config(page_title="ZMFRKD: –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫", layout="wide")
st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ CSS ---
with open("custom_ui.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    # –í—Å—Ç–∞–≤–∫–∞ SVG-—Ñ–æ–Ω–æ–≤
st.markdown("""
<div class="background-icons">
<svg width="200" height="200" viewBox="0 0 24 24" fill="#ddf62b">
  <path d="M3 3h18v2H3zm0 4h10v2H3zm0 4h18v2H3zm0 4h10v2H3zm0 4h18v2H3z"/>
</svg>
<svg width="200" height="200" viewBox="0 0 24 24" fill="#ddf62b">
  <path d="M5 8h14v2H5zm0 4h10v2H5zm0 4h14v2H5z"/>
</svg>
</div>
""", unsafe_allow_html=True)

# --- –û—á–∏—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ---
def clean_money(val):
    try:
        if pd.isna(val): return 0.0
        return float(str(val).replace(" ", "").replace(",", "."))
    except:
        return 0.0

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –§–ù–° ---
def get_fns_data(inn):
    try:
        API_KEY = "16705715af79b9eccb75157e077a059452f8fbb5"
        url = f"https://api-fns.ru/api/search?q={inn}&key={API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()

        if response.status_code != 200 or "items" not in data or not data["items"]:
            return {"error": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –§–ù–°"}

        item = data["items"][0]
        org = item.get("–Æ–õ", {})  # üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!

        return {
            "–ò–ù–ù": org.get("–ò–ù–ù", ""),
            "–û–ì–†–ù": org.get("–û–ì–†–ù", ""),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": org.get("–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ", ""),
            "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": org.get("–ù–∞–∏–º–ü–æ–ª–Ω–Æ–õ", ""),
            "–ê–¥—Ä–µ—Å": org.get("–ê–¥—Ä–µ—Å–ü–æ–ª–Ω", ""),
            "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": org.get("–î–∞—Ç–∞–û–ì–†–ù", ""),
            "–°—Ç–∞—Ç—É—Å": org.get("–°—Ç–∞—Ç—É—Å", ""),
            "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": org.get("–û—Å–Ω–í–∏–¥–î–µ—è—Ç", "")
        }

    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}"}

# --- –ü–∞—Ä—Å–∏–Ω–≥ PDF-—Ñ–∞–π–ª–æ–≤ ---
def parse_pdf(file):
    text_rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            lines = text.split("\n") if text else []
            for line in lines:
                if len(line.strip().split()) >= 4:
                    text_rows.append(line.strip().split())
    df = pd.DataFrame(text_rows)
    return df

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
st.title("ZMFRKD: –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—ã–ø–∏—Å–æ–∫")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–∏—Å–æ–∫ (.xlsx, .xls, .csv, .pdf)")

uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã", type=["xlsx", "xls", "csv", "pdf"], accept_multiple_files=True)
FIELDS = ["–î–∞—Ç–∞", "–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "–î–µ–±–µ—Ç", "–ö—Ä–µ–¥–∏—Ç"]
all_normalized = []

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ ---
for uploaded_file in uploaded_files:
    try:
        st.markdown(f"### üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {uploaded_file.name}")
        manual = st.checkbox("üîß –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫", key=f"manual_{uploaded_file.name}")
        filetype = uploaded_file.name.lower().split(".")[-1]

        if filetype == "pdf":
            df = parse_pdf(uploaded_file)
            df.columns = df.iloc[0]
            df = df.drop(index=0).reset_index(drop=True)
        else:
            preview_df = pd.read_excel(uploaded_file, header=None)
            header_row = preview_df[preview_df.apply(
                lambda row: row.astype(str).str.contains("–¥–∞—Ç–∞|–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ|–∏–Ω–Ω|–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", case=False).sum() >= 2,
                axis=1
            )].index.min()

            df = pd.read_excel(uploaded_file, header=header_row)
            df = df.dropna(how="all").loc[:, ~df.columns.duplicated()]
            df.columns = df.columns.map(str).str.strip()

        if manual:
            st.markdown("#### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤—Ä—É—á–Ω—É—é:")
            mapping = {}
            for key in FIELDS:
                options = [""] + list(df.columns)
                mapping[key] = st.selectbox(
                    f"{key} ({uploaded_file.name})",
                    options=options,
                    index=options.index(key) if key in options else 0,
                    key=f"{key}_{uploaded_file.name}"
                )
        else:
            mapping = {
                "–î–∞—Ç–∞": "–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": "–ò–ù–ù/–ö–ò–û.1",
                "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
                "–î–µ–±–µ—Ç": "–ü–æ –¥–µ–±–µ—Ç—É (—Ä—É–±)",
                "–ö—Ä–µ–¥–∏—Ç": "–ü–æ –∫—Ä–µ–¥–∏—Ç—É (—Ä—É–±)"
            }

        normalized_data = []
        for _, row in df.iterrows():
            try:
                normalized_row = {
                    "–î–∞—Ç–∞": str(pd.to_datetime(row.get(mapping["–î–∞—Ç–∞"], ""), errors="coerce").date()) if pd.notna(row.get(mapping["–î–∞—Ç–∞"], "")) else "",
                    "–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞": str(row.get(mapping["–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"], "")).strip(),
                    "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": str(row.get(mapping["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"], "")).strip(),
                    "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ": str(row.get(mapping["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"], "")).strip(),
                    "–î–µ–±–µ—Ç": clean_money(row.get(mapping["–î–µ–±–µ—Ç"], "")),
                    "–ö—Ä–µ–¥–∏—Ç": clean_money(row.get(mapping["–ö—Ä–µ–¥–∏—Ç"], ""))
                }
                if all(normalized_row[f] not in ["", "None", "nan"] for f in ["–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"]):
                    normalized_data.append(normalized_row)
            except:
                continue

        normalized_df = pd.DataFrame(normalized_data)
        all_normalized.append(normalized_df)

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {str(e)}")
# --- –í—ã–≤–æ–¥ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
if all_normalized:
    combined_df = pd.concat(all_normalized, ignore_index=True)
    st.markdown("## üìä –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    st.dataframe(combined_df, use_container_width=True)

    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
        combined_df.to_excel(writer, index=False, sheet_name='Combined')
    excel_buffer.seek(0)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (.xlsx)",
        data=excel_buffer,
        file_name="–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
    st.markdown("## üìà –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
    col1, col2, col3 = st.columns(3)
    with col1:
        date_range = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", [])
    with col2:
        inn_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ –ò–ù–ù")
    with col3:
        name_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")

    filtered_df = combined_df.copy()
    if len(date_range) == 2:
        start_date, end_date = date_range
        filtered_df = filtered_df[
            (pd.to_datetime(filtered_df["–î–∞—Ç–∞"], errors="coerce") >= pd.to_datetime(start_date)) &
            (pd.to_datetime(filtered_df["–î–∞—Ç–∞"], errors="coerce") <= pd.to_datetime(end_date))
        ]
    if inn_filter:
        filtered_df = filtered_df[filtered_df["–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"].astype(str).str.contains(inn_filter)]
    if name_filter:
        filtered_df = filtered_df[filtered_df["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"].astype(str).str.lower().str.contains(name_filter.lower())]

    st.metric("üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π", len(filtered_df))
    st.metric("üí∏ –°—É–º–º–∞ –ø–æ –¥–µ–±–µ—Ç—É", f"{filtered_df['–î–µ–±–µ—Ç'].sum():,.2f}".replace(",", " "))
    st.metric("üí∞ –°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É", f"{filtered_df['–ö—Ä–µ–¥–∏—Ç'].sum():,.2f}".replace(",", " "))

    filtered_excel = BytesIO()
    with pd.ExcelWriter(filtered_excel, engine='xlsxwriter') as writer:
        filtered_df.to_excel(writer, index=False, sheet_name='Filtered')
    filtered_excel.seek(0)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (.xlsx)",
        data=filtered_excel,
        file_name="—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # --- –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º ---
    st.markdown("## üë• –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º:")
    group_df = filtered_df.groupby("–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞").agg({
        "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": lambda x: x.mode()[0] if not x.mode().empty else x.iloc[0],
        "–î–∞—Ç–∞": "count",
        "–î–µ–±–µ—Ç": "sum",
        "–ö—Ä–µ–¥–∏—Ç": "sum"
    }).reset_index().rename(columns={"–î–∞—Ç–∞": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π"})

    st.dataframe(group_df, use_container_width=True)

    group_excel = BytesIO()
    with pd.ExcelWriter(group_excel, engine='xlsxwriter') as writer:
        group_df.to_excel(writer, index=False, sheet_name='–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã')
    group_excel.seek(0)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º (.xlsx)",
        data=group_excel,
        file_name="–∞–Ω–∞–ª–∏—Ç–∏–∫–∞_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # --- –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É ---
    st.markdown("## üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É:")
    selected_inn = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", group_df["–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"].unique())
    selected_df = filtered_df[filtered_df["–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"] == selected_inn]
    st.dataframe(selected_df, use_container_width=True)

    detail_excel = BytesIO()
    with pd.ExcelWriter(detail_excel, engine='xlsxwriter') as writer:
        selected_df.to_excel(writer, index=False, sheet_name='–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É')
    detail_excel.seek(0)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (.xlsx)",
        data=detail_excel,
        file_name="–æ–ø–µ—Ä–∞—Ü–∏–∏_–ø–æ_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # --- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù (–§–ù–° + —Å—Å—ã–ª–∫–∏) ---
st.markdown("## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù")
input_inn = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")

if input_inn:
    data = get_fns_data(input_inn.strip())
    if "error" in data:
        st.error(f"‚ùå {data['error']}")
    else:
        st.success("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –§–ù–°")
        for key, value in data.items():
            st.markdown(f"**{key}:** {value}")

        st.markdown("### üîó –í–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        st.markdown(f"""
        - [üß© Rusprofile](https://www.rusprofile.ru/search?query={input_inn})
        - [üìö Kontur.Focus](https://focus.kontur.ru/search?query={input_inn})
        - [üìñ Casebook](https://casebook.ru/search/?searchString={input_inn})
        - [‚öñÔ∏è –ö–ê–î –ê—Ä–±–∏—Ç—Ä](https://kad.arbitr.ru/Search/?q={input_inn})
        """)


